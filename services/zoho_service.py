
"""
ุฎุฏูุฉ Zoho CRM ุงููุญุฏุซุฉ - Zoho Service for Aqar Module
"""

import asyncio
import json
from typing import Dict, Any, Optional, List
import aiohttp
from datetime import datetime, timedelta
from utils.logger import setup_logger

logger = setup_logger(__name__)

class ZohoService:
    """ุฎุฏูุฉ ุงูุชุนุงูู ูุน Zoho CRM - ููุฏููู Aqar ุงูุฌุฏูุฏ"""
    
    def __init__(self, client_id: str, client_secret: str, 
                 refresh_token: str, access_token: str, module_name: str = "Aqar"):
        self.client_id = client_id
        self.client_secret = client_secret
        self.refresh_token = refresh_token
        self.access_token = access_token
        self.module_name = module_name  # ููุฏููู Aqar ุงูุฌุฏูุฏ
        
        self.base_url = "https://www.zohoapis.com/crm/v2"
        self.token_url = "https://accounts.zoho.com/oauth/v2/token"
        self.session = None
        
        # ุฎุฑูุทุฉ ุงูุญููู ุงููุญุฏุซุฉ ูููุฏููู Aqar
        self.field_map = {
            "ุงูุจูุงู": "Name",                    # ุญูู ุงูุจูุงู ุงููุฏูุฌ ุงูุฌุฏูุฏ
            "ุงูููุทูุฉ": "Region",
            "ููุฏ ุงููุญุฏุฉ": "Unit_Code",
            "ููุน ุงููุญุฏุฉ": "Unit_Type",
            "ุญุงูุฉ ุงููุญุฏุฉ": "Unit_Condition",
            "ุงููุณุงุญุฉ": "Area",
            "ุงูุฏูุฑ": "Floor",
            "ุงูุณุนุฑ": "Price",
            "ุงููููุฒุงุช": "Features",
            "ุงูุนููุงู": "Address",
            "ุงุณู ุงูููุธู": "Employee_Name",
            "ุงุณู ุงููุงูู": "Owner_Name",
            "ุฑูู ุงููุงูู": "Owner_Phone",
            "ุงุชุงุญุฉ ุงูุนูุงุฑ": "Availability",
            "ุญุงูุฉ ุงูุตูุฑ": "Photos_Status",
            "ุชูุงุตูู ูุงููุฉ": "Full_Details",
            "telegram_message_id": "Telegram_Message_ID",
            "notion_property_id": "Notion_Property_ID",
            "notion_owner_id": "Notion_Owner_ID",
            "status": "Status"
        }
        
    async def __aenter__(self):
        """Context manager entry"""
        self.session = aiohttp.ClientSession()
        await self.refresh_access_token()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        if self.session:
            await self.session.close()
    
    async def refresh_access_token(self) -> bool:
        """ุชุญุฏูุซ access token"""
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
                
            data = {
                "refresh_token": self.refresh_token,
                "client_id": self.client_id,
                "client_secret": self.client_secret,
                "grant_type": "refresh_token"
            }
            
            async with self.session.post(self.token_url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if "access_token" in result:
                        self.access_token = result["access_token"]
                        logger.info("โ ุชู ุชุญุฏูุซ Zoho access token")
                        return True
                    else:
                        logger.error(f"โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุชููู: {result}")
                else:
                    logger.error(f"โ ุฎุทุฃ HTTP ูู ุชุญุฏูุซ ุงูุชููู: {response.status}")
                    
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุชููู: {e}")
            
        return False
    
    async def create_record(self, property_data: Dict[str, Any]) -> Optional[str]:
        """ุฅูุดุงุก ุณุฌู ุฌุฏูุฏ ูู ููุฏููู Aqar"""
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            # ุชุญููู ุงูุจูุงูุงุช ุฅูู ุชูุณูู Zoho
            zoho_data = self._convert_to_zoho_format(property_data)
            
            url = f"{self.base_url}/{self.module_name}"
            headers = {
                "Authorization": f"Zoho-oauthtoken {self.access_token}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "data": [zoho_data]
            }
            
            async with self.session.post(url, json=payload, headers=headers) as response:
                if response.status == 201:
                    result = await response.json()
                    if result.get("data") and len(result["data"]) > 0:
                        record_id = result["data"][0]["details"]["id"]
                        logger.info(f"โ ุชู ุฅูุดุงุก ุณุฌู ูู Zoho Aqar: {record_id}")
                        return record_id
                    else:
                        logger.error(f"โ ุฎุทุฃ ูู ุงุณุชุฌุงุจุฉ Zoho: {result}")
                elif response.status == 401:
                    # ุฅุนุงุฏุฉ ุชุญุฏูุซ ุงูุชููู ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู
                    if await self.refresh_access_token():
                        return await self.create_record(property_data)
                else:
                    error_text = await response.text()
                    logger.error(f"โ ุฎุทุฃ HTTP ูู ุฅูุดุงุก ุงูุณุฌู: {response.status} - {error_text}")
                    
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุณุฌู: {e}")
            
        return None
    
    async def search_record(self, field_name: str, field_value: str) -> Optional[Dict[str, Any]]:
        """ุงูุจุญุซ ุนู ุณุฌู ุจูุงุณุทุฉ ุญูู ูุนูู"""
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            # ุชุญููู ุงุณู ุงูุญูู ุฅูู ุชูุณูู Zoho
            zoho_field = self.field_map.get(field_name, field_name)
            
            url = f"{self.base_url}/{self.module_name}/search"
            headers = {
                "Authorization": f"Zoho-oauthtoken {self.access_token}",
                "Content-Type": "application/json"
            }
            
            params = {
                "criteria": f"{zoho_field}:equals:{field_value}"
            }
            
            async with self.session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("data") and len(result["data"]) > 0:
                        record = result["data"][0]
                        logger.info(f"โ ุชู ุงูุนุซูุฑ ุนูู ุงูุณุฌู ูู Zoho: {record['id']}")
                        return record
                elif response.status == 204:
                    # ูุง ุชูุฌุฏ ูุชุงุฆุฌ
                    logger.info(f"๐ ูู ูุชู ุงูุนุซูุฑ ุนูู ุณุฌู ุจู {field_name}: {field_value}")
                    return None
                elif response.status == 401:
                    # ุฅุนุงุฏุฉ ุชุญุฏูุซ ุงูุชููู ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู
                    if await self.refresh_access_token():
                        return await self.search_record(field_name, field_value)
                else:
                    error_text = await response.text()
                    logger.error(f"โ ุฎุทุฃ HTTP ูู ุงูุจุญุซ: {response.status} - {error_text}")
                    
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุงูุจุญุซ: {e}")
            
        return None
    
    async def update_record(self, record_id: str, property_data: Dict[str, Any]) -> bool:
        """ุชุญุฏูุซ ุณุฌู ููุฌูุฏ"""
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            # ุชุญููู ุงูุจูุงูุงุช ุฅูู ุชูุณูู Zoho
            zoho_data = self._convert_to_zoho_format(property_data)
            zoho_data["id"] = record_id
            
            url = f"{self.base_url}/{self.module_name}"
            headers = {
                "Authorization": f"Zoho-oauthtoken {self.access_token}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "data": [zoho_data]
            }
            
            async with self.session.put(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("data") and len(result["data"]) > 0:
                        logger.info(f"โ ุชู ุชุญุฏูุซ ุงูุณุฌู ูู Zoho: {record_id}")
                        return True
                    else:
                        logger.error(f"โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุณุฌู: {result}")
                elif response.status == 401:
                    # ุฅุนุงุฏุฉ ุชุญุฏูุซ ุงูุชููู ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู
                    if await self.refresh_access_token():
                        return await self.update_record(record_id, property_data)
                else:
                    error_text = await response.text()
                    logger.error(f"โ ุฎุทุฃ HTTP ูู ุชุญุฏูุซ ุงูุณุฌู: {response.status} - {error_text}")
                    
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุณุฌู: {e}")
            
        return False
    
    async def add_property_to_record(self, record_id: str, property_data: Dict[str, Any]) -> bool:
        """ุฅุถุงูุฉ ุนูุงุฑ ุฅุถุงูู ูุณุฌู ููุฌูุฏ (ููุนูุงุฑุงุช ุงููุชุนุฏุฏุฉ)"""
        
        try:
            # ุงูุจุญุซ ุนู ุงูุณุฌู ุงูุญุงูู
            existing_record = await self.get_record(record_id)
            if not existing_record:
                return False
            
            # ุฏูุฌ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ ูุน ุงูููุฌูุฏุฉ
            merged_data = self._merge_property_data(existing_record, property_data)
            
            # ุชุญุฏูุซ ุงูุณุฌู
            return await self.update_record(record_id, merged_data)
            
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูุนูุงุฑ ููุณุฌู: {e}")
            return False
    
    async def get_record(self, record_id: str) -> Optional[Dict[str, Any]]:
        """ุงูุญุตูู ุนูู ุณุฌู ุจูุงุณุทุฉ ID"""
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            url = f"{self.base_url}/{self.module_name}/{record_id}"
            headers = {
                "Authorization": f"Zoho-oauthtoken {self.access_token}",
                "Content-Type": "application/json"
            }
            
            async with self.session.get(url, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("data") and len(result["data"]) > 0:
                        return result["data"][0]
                elif response.status == 401:
                    # ุฅุนุงุฏุฉ ุชุญุฏูุซ ุงูุชููู ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู
                    if await self.refresh_access_token():
                        return await self.get_record(record_id)
                else:
                    error_text = await response.text()
                    logger.error(f"โ ุฎุทุฃ HTTP ูู ุงูุญุตูู ุนูู ุงูุณุฌู: {response.status} - {error_text}")
                    
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุณุฌู: {e}")
            
        return None
    
    def _convert_to_zoho_format(self, property_data: Dict[str, Any]) -> Dict[str, Any]:
        """ุชุญููู ุจูุงูุงุช ุงูุนูุงุฑ ุฅูู ุชูุณูู Zoho"""
        
        zoho_record = {}
        
        for arabic_field, english_field in self.field_map.items():
            value = property_data.get(arabic_field)
            if value is not None:
                # ุชุญููู ุงูููู ุญุณุจ ููุน ุงูุญูู
                if english_field in ["Area", "Price"] and isinstance(value, str):
                    # ุชุญููู ุงููุตูุต ุงูุฑูููุฉ ุฅูู ุฃุฑูุงู
                    try:
                        zoho_record[english_field] = int(value) if value.isdigit() else value
                    except:
                        zoho_record[english_field] = value
                else:
                    zoho_record[english_field] = value
        
        # ุฅุถุงูุฉ ูุนูููุงุช ุฅุถุงููุฉ
        zoho_record["Created_Time"] = datetime.now().isoformat()
        zoho_record["Modified_Time"] = datetime.now().isoformat()
        
        # ุชุญุฏูุฏ ุญุงูุฉ ูุชุนุฏุฏุฉ ุงูููู ููู Status
        status_values = []
        if property_data.get("status"):
            status_values.append(property_data["status"])
        
        # ุฅุถุงูุฉ ุญุงูุงุช ุฅุถุงููุฉ ุจูุงุกู ุนูู ุงูุจูุงูุงุช
        if property_data.get("notion_property_id"):
            status_values.append("Notion_Synced")
        if property_data.get("telegram_message_id"):
            status_values.append("Telegram_Processed")
        
        if status_values:
            zoho_record["Status"] = status_values
        
        return zoho_record
    
    def _merge_property_data(self, existing_record: Dict[str, Any], 
                           new_property_data: Dict[str, Any]) -> Dict[str, Any]:
        """ุฏูุฌ ุจูุงูุงุช ุงูุนูุงุฑ ุงูุฌุฏูุฏ ูุน ุงูุณุฌู ุงูููุฌูุฏ"""
        
        merged_data = existing_record.copy()
        
        # ุฏูุฌ ุงูุญููู ุงููุตูุฉ ุจูุงุตูุฉ
        text_fields = ["Full_Details", "Features", "Address"]
        for field in text_fields:
            existing_value = existing_record.get(field, "")
            new_value = new_property_data.get(self._get_arabic_field(field), "")
            
            if new_value and new_value != existing_value:
                if existing_value:
                    merged_data[field] = f"{existing_value} | {new_value}"
                else:
                    merged_data[field] = new_value
        
        # ุชุญุฏูุซ ุงูุชูููุช
        merged_data["Modified_Time"] = datetime.now().isoformat()
        
        # ุฅุถุงูุฉ ูุนูููุงุช ุงูุนูุงุฑ ุงูุฅุถุงูู
        additional_unit_code = new_property_data.get("ููุฏ ุงููุญุฏุฉ", "")
        if additional_unit_code:
            existing_codes = merged_data.get("Unit_Code", "")
            if existing_codes and additional_unit_code not in existing_codes:
                merged_data["Unit_Code"] = f"{existing_codes}, {additional_unit_code}"
            elif not existing_codes:
                merged_data["Unit_Code"] = additional_unit_code
        
        return merged_data
    
    def _get_arabic_field(self, english_field: str) -> str:
        """ุงูุญุตูู ุนูู ุงุณู ุงูุญูู ุงูุนุฑุจู ูู ุงูุฅูุฌููุฒู"""
        
        reverse_map = {v: k for k, v in self.field_map.items()}
        return reverse_map.get(english_field, english_field)
    
    async def get_daily_report_data(self, date: datetime) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุชูุฑูุฑ ุงููููู"""
        
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            # ุชุญุฏูุฏ ูุทุงู ุงูุชุงุฑูุฎ
            start_date = date.strftime("%Y-%m-%d")
            end_date = (date + timedelta(days=1)).strftime("%Y-%m-%d")
            
            url = f"{self.base_url}/{self.module_name}"
            headers = {
                "Authorization": f"Zoho-oauthtoken {self.access_token}",
                "Content-Type": "application/json"
            }
            
            params = {
                "criteria": f"Created_Time:between:{start_date}T00:00:00+00:00,{end_date}T00:00:00+00:00"
            }
            
            async with self.session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    records = result.get("data", [])
                    
                    # ุชุญููู ุงูุจูุงูุงุช ูุฅูุดุงุก ุงูุชูุฑูุฑ
                    report_data = {
                        "total_records": len(records),
                        "by_employee": {},
                        "by_region": {},
                        "by_status": {},
                        "records": records
                    }
                    
                    for record in records:
                        # ุญุณุจ ุงูููุธู
                        employee = record.get("Employee_Name", "ุบูุฑ ูุญุฏุฏ")
                        report_data["by_employee"][employee] = report_data["by_employee"].get(employee, 0) + 1
                        
                        # ุญุณุจ ุงูููุทูุฉ
                        region = record.get("Region", "ุบูุฑ ูุญุฏุฏ")
                        report_data["by_region"][region] = report_data["by_region"].get(region, 0) + 1
                        
                        # ุญุณุจ ุงูุญุงูุฉ
                        status = record.get("Status", ["ุบูุฑ ูุญุฏุฏ"])
                        if isinstance(status, str):
                            status = [status]
                        for s in status:
                            report_data["by_status"][s] = report_data["by_status"].get(s, 0) + 1
                    
                    logger.info(f"โ ุชู ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุชูุฑูุฑ: {len(records)} ุณุฌู")
                    return report_data
                    
                elif response.status == 401:
                    if await self.refresh_access_token():
                        return await self.get_daily_report_data(date)
                else:
                    error_text = await response.text()
                    logger.error(f"โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุชูุฑูุฑ: {response.status} - {error_text}")
                    
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุชูุฑูุฑ: {e}")
            
        return {}
